<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8" />
		<title><%=login_id%><%=title%>오픈챠트 시작</title>
		<script src="https://code.jquery.com/jquery-latest.min.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/chart.js@3.8.0/dist/chart.min.js"></script>
	</head>
	<body>
		<canvas id="myChart" width="400" height="400"></canvas>
		<select id="selVote">
			<option value="red">Red</option>
			<option value="blue">Blue</option>
			<option value="yellow">Yellow</option>
			<option value="green">Green</option>
			<option value="purple">Purple</option>
			<option value="orange">Orange</option>
		</select>
        <% if(logined == true) { %>
		<button id="btnVote">투표하기</button>
		<button id="btnVoteDel">초기화하기</button>
        <% } %>
		<button id="btnHome">홈페이지로이동</button>
        <% if(login_id == 'admin') { %>
            <input type="button" onclick="location.replace('/users/listuser');" value="회원리스트">
        <% } %>
        <% if(logined == true) { %>
        	<button onclick="location.replace('/users/logout');">로그아웃</button>
        <% } else { %>
        	<button onclick="location.replace('/users/login');">로그인</button>
        <% } %>
		<br>
        <% if(login_id == 'admin') { %>
            <input type="button" onclick="location.replace('/xmongo_users/listuser');" value="몽고DB용 회원리스트">
        <% } %>
        <% if(logined == true) { %>
			<button onclick="location.replace('/xmongo_users/logout');">몽고DB용 로그아웃</button>
        <% } else { %>
			<button onclick="location.replace('/xmongo_users/login');">몽고DB용 로그인</button>
        <% } %>
		<button onclick="location.replace('/chart');">리액트js 챠트</button>
		<script>
			var btnVote = document.getElementById('btnVote'); //투표하기 버튼객체 생성
			var selVote = document.getElementById('selVote'); //좋아하는색성 선택객체 생성
			var jsonData = { red: 12, blue: 19, yellow: 3, green: 5, purple: 2, orange: 3 }; //초기 json 데이터객체 생성
			//var jsonData = [12, 19, 3, 5, 2, 3];//참조: 자바스크립트의 배열구조
			var ctx = document.getElementById('myChart').getContext('2d'); //막대그래프 출력영역 객체 생성

			//myChart 시작
			var datasets_line_bar = [
				{
					//데이터내용 배열 객체 생성
					label: '본인이 좋아하는 색상 설문조사',
					data: jsonData,
					backgroundColor: [
						'rgba(255, 99, 132, 0.2)',
						'rgba(54, 162, 235, 0.2)',
						'rgba(255, 206, 86, 0.2)',
						'rgba(75, 192, 192, 0.2)',
						'rgba(153, 102, 255, 0.2)',
						'rgba(255, 159, 64, 0.2)',
					],
					borderColor: [
						'rgba(255, 99, 132, 1)',
						'rgba(54, 162, 235, 1)',
						'rgba(255, 206, 86, 1)',
						'rgba(75, 192, 192, 1)',
						'rgba(153, 102, 255, 1)',
						'rgba(255, 159, 64, 1)',
					],
					borderWidth: 1,
				},
			];
			var options_line_bar = {
				//데이터 출력옵션 객체
				scales: {
					y: {
						beginAtZero: true,
					},
				},
			};
			//myChart 객체 생성(아래)  : 여기서 ctx 영역에 Chart 데이터 객체가 출력된다.
			var myChart = new Chart(ctx, {
				type: 'bar', //radar, doughnut, pie, polar, bubble, scatter, area 챠트종류 선택
				data: {
					labels: [],
					datasets: datasets_line_bar,
				},
				options: options_line_bar,
			});
		</script>

		<canvas id="myChart2" width="400" height="400"></canvas>
		<script>
			var ctx2 = document.getElementById('myChart2').getContext('2d'); //레이더그래프 출력영역 객체 생성
			//myChart2 시작
			var datasets_radar = [
				{
					//데이터내용 배열 객체 생성
					label: '본인이 좋아하는 색상 설문조사',
					data: [
						jsonData.red,
						jsonData.blue,
						jsonData.yellow,
						jsonData.green,
						jsonData.purple,
						jsonData.orange,
					],
					fill: true,
					radius: 6, //각 data 항목이 6개의 이미지가 원형이고, 그 크기를 반지름
					pointRadius: 6,
					pointBorderWidth: 6,
					pointBackgroundColor: [
						'rgba(255,99,132,0.2)',
						'rgba(54,162,235,0.2)',
						'rgba(255,206,86,0.2)',
						'rgba(75,192,192,0.2)',
						'rgba(153,102,255,0.2)',
						'rgba(255,159,64,0.2)',
					],
					pointBackgroundColor: [
						'rgba(255,99,132,1)',
						'rgba(54,162,235,1)',
						'rgba(255,206,86,1)',
						'rgba(75,192,192,1)',
						'rgba(153,102,255,1)',
						'rgba(255,159,64,1)',
					],
					pointHoverRadius: 10,
				},
			];
			var options_radar = {
				//데이터 출력옵션 객체
				scale: {
					gridLines: {
						color: 'black',
						lineWidth: 3,
					},
					angleLines: {
						display: true,
					},
					ticks: {
						beginAtZero: true,
						stepSize: 1,
					},
				},
				legend: {
					//범례
					position: 'left',
				},
			};
			//myChart2 객체 생성(아래) : 여기서 ctx2 영역에 Chart 데이터 객체가 출력된다.
			var myChart2 = new Chart(ctx2, {
				type: 'radar',
				data: {
					labels: [
						selVote[0].value,
						selVote[1].value,
						selVote[2].value,
						selVote[3].value,
						selVote[4].value,
						selVote[5].value,
					],
					datasets: datasets_radar,
				},
				options: options_radar,
			});
		</script>
        <script src="https://socket-jvbqr.run.goorm.io/socket.io/socket.io.js">
			//노드js에서 발생시킨 소켓io.js를 호출
		</script>
		<script>
			var serverUrl = "https://socket-jvbqr.run.goorm.io";
			var socket = io.connect(serverUrl);//필요시 (serverUrl, socketOptions)
		</script>
		<script>
            var updateRender = function() {
                    myChart.data.datasets[0].data = jsonData;//결과적으로 json데이터를 만들어야함.
						myChart.update();//Char.js에 내장된 함수로 그래프를 재생 시킴
						//두번째 챠트 출력하기-레이더 챠트는 위 막대/라인챠트처럼 jsonData사용불가 배열 데이터로 사용
						myChart2.data.datasets[0].data = [jsonData.red,jsonData.blue,jsonData.yellow,jsonData.green,jsonData.purple,jsonData.orange];
						myChart2.update();
                }
            var getData = function() {
                $.ajax({
                    type:'get',
                    url:'/chart/getdata',
                    dataType:'json',
                    success:function(result) {
                        var len = Object.keys(result).length;//json 객체의 길이 구하기
                        if(len == 0) {
                            result={"red":0,"blue":0,"yellow":0,"green":0,"purple":0,"orange":0};
                            jsonData = result;
                        }else{
                            console.log("반환값은 %j" , result[0]);
                            jsonData = result[0];
                        }
                        //페이지 리프레시(재생): 나중에 
                        updateRender();// 함수로 분리예정

                    },
                    error:function(result) {
                        alert("조회 RestAPI 서버에 문제가 있습니다.");
                    }
                });
            }
			$('#btnVoteDel').on('click', function () {
				if (confirm('정말로 초기화 하시겠습니까, 투표한 DB자료가 삭제됩니다.')) {
					//구현내용
                    $.ajax({
                    type:'post',
                    url:'/chart/deldata',
                    success:function(result) {
                        if(result=="success"){
                            alert("모든 투표자료가 삭제 되었습니다.");
                            //jsonData = {"red":0,"blue":0,"yellow":0,"green":0,"purple":0,"orange":0};//jsonData 초기화
                            //updateRender();
							getData();
                            socket.emit("OnOff", {msg:'updateRender'});//1:1통신 노드js로 문자를 OnOff 에 담아서 보냄.
                        }
                    },
                    error:function(result) {
                        alert("API서버를 사용할 수 없습니다.");
                    }
                });
				}
			});
			//btnVote.onclick = function () { 로그인 하지 않았을 때 에러나서 수정
			$('#btnVote').on('click', function () {
				var selVote = document.getElementById("selVote");//프로시저 사용 추가
				var selectColor = selVote.options[selVote.selectedIndex].text;//프로시저 사용 추가
				var voteIdx = document.getElementById('selVote').options.selectedIndex;
				//alert(voteIdx);
                //투표버튼을 클릭했을때 해당 버튼의 값만 +1 하는 스위치문
				/* 프로시저를 사용하면 샐략
                var red=0, blue=0, yellow=0, green=0, purple=0, orange=0;
                switch(voteIdx) {
                case 0:
                    jsonData.red += 1;//Json데이터 방식 = jsonData.blue
                    red = 1;
                    break;
                case 1:
                    jsonData.blue += 1;
                    blue = 1;
                    break;
                case 2:
                    jsonData.yellow += 1;
                    yellow = 1;
                    break;
                case 3:
                    jsonData.green += 1;
                    green = 1;
                    break;
                case 4:
                    jsonData.purple += 1;
                    purple = 1;
                    break;
                case 5:
                    jsonData.orange += 1;
                    orange = 1;
                    break;
                }
                console.log("여기 %j", jsonData);
				*/
                $.ajax({
                    type:'post',
                    url:'/chart/setdata',
                    headers:{
                        "Content-Type":"application/json",
                        "X-HTTP-Method-Override":"POST"
                    },
					/* 프로시저를 사용하면 생략
                    data:JSON.stringify({//json데이터를 post전송할 text로 변경.
                        "red":red,
                        "blue":blue,
                        "yellow":yellow,
                        "green":green,
                        "purple":purple,
                        "orange":orange
                    }),
					*/
					data:JSON.stringify({//프로시저 사용 추가
                        "selectColor":selectColor
                    }),
                    dataType:'json',
                    success:function(result) {
                        //페이지 리프레시(재생): 나중에 
                        //updateRender();//프로시저 사용으로 생략
						getData();//프로시저 사용 추가
                        socket.emit("OnOff", {msg:'updateRender'});//1:1통신 노드js로 문자를 OnOff 에 담아서 보냄.
                    },
                    error:function(result) {
                        alert("API서버가 작동하지 않습니다. 다음에 이용해 주세요");
                    }
                });	
            });
		</script>
		<script>
			$(document).ready(function () {
                socket.on('OnOff', function(jsonMsg){
                        //msg = JSON.stringify(jsonMsg);//json데이터를 스트링데이터로 변경
                        console.log(socket.id+"가 받은 메세지는 "+jsonMsg.msg);
                        if(jsonMsg.msg=="updateRender") {
                              getData();
                        }
                  });
				//페이지 로딩시 챠트에 초기 데이터 바인딩 코딩예정. 나중에 getData() 함수로 분리예정
				getData();
				//홈페이지로 이동
				$('#btnHome').on('click', function () {
					location.replace('/');
				});
			});
		</script>
	</body>
</html>